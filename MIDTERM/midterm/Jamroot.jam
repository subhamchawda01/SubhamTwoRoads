import modules ;
import set ;
import stage ;
import package ;
import path ;
import common ;
import os ;
import regex ;
import errors ;
import "class" : new ;
import common ;
import sequence ;
import pch ;

local only_target = "all" ;
local install_loc = "../cvquant_install" ;

# Extract build requirements from command line options
for option in [ modules.peek : ARGV ] {
  local temporary = [ MATCH ([^=]+)= : $(option) ] ;

  if $(temporary) {
    value  = [ MATCH [^=]+=([^=]+)$ : $(option) ] ;
    if $(value) && $(temporary) = "--only_target" {
       if $(value) != "all" {
           only_target = $(value) ;
           ECHO "only target $(only_target)" ;
       }
    }
    if $(value) && $(temporary) = "--mysqlclient" {
       if $(value) = "needed" {
           path-constant build-mysqlclient : true ;
           ECHO "building sql execs too" ;
       }
    }
    if $(value) && $(temporary) = "--install_loc" {
       install_loc = $(value) ;
       ECHO "Install location changed to $(value)" ;
    }    
  }
}
using gcc ;

path-constant MIDTERM_PROJECT_ROOT : . ;
path-constant PROJECT_ROOT : $(MIDTERM_PROJECT_ROOT) ;

path-constant CVQUANT_INSTALL : $(install_loc) ;
# If we are building our own copy of dvccode dvctrade etc
# they will be installed in ../cvquant_install/dvccode and ../cvquant/dvctrade etc.
# Or else we should use it from /apps/cvquant_install/dvccode /apps/cvquant_install/dvctrade
# This requires that people will include dvccode headers as
# `#include "dvccode/CDef/abc.hpp"` and not `#include "CDef/abc.hpp"`
path-constant DVCCODE_INSTALL : $(CVQUANT_INSTALL)/dvccode ;
path-constant DVCCODE_LIB_INSTALL : $(DVCCODE_INSTALL)/lib ;
path-constant DVCCODE_LIB_INSTALL_DEBUG : $(DVCCODE_INSTALL)/libdebug ;
path-constant DVCTRADE_INSTALL : $(CVQUANT_INSTALL)/dvctrade ;
path-constant DVCTRADE_LIB_INSTALL : $(DVCTRADE_INSTALL)/lib ;
path-constant DVCTRADE_LIB_INSTALL_DEBUG : $(DVCTRADE_INSTALL)/libdebug ;
path-constant BASEINFRA_INSTALL : $(CVQUANT_INSTALL)/baseinfra ;
path-constant BASEINFRA_LIB_INSTALL : $(BASEINFRA_INSTALL)/lib ;
path-constant BASEINFRA_LIB_INSTALL_DEBUG : $(BASEINFRA_INSTALL)/libdebug ;
path-constant BASETRADE_INSTALL : $(CVQUANT_INSTALL)/basetrade ;
path-constant BASETRADE_LIB_INSTALL : $(BASETRADE_INSTALL)/lib ;
path-constant MIDTERM_INSTALL : $(CVQUANT_INSTALL)/midterm ;
path-constant MIDTERM_LIB_INSTALL : $(MIDTERM_INSTALL)/lib ;

# This variable PROJECT_INSTALL is primarily used to get the location
# of where to install headers, libraries and execs
path-constant PROJECT_INSTALL : $(MIDTERM_INSTALL) ;
path-constant PROJECT_BIN_INSTALL : $(PROJECT_INSTALL)/bin ;
path-constant PROJECT_BIN_INSTALL_DEBUG : $(PROJECT_INSTALL)/bindebug ;
path-constant PROJECT_LIB_INSTALL : $(PROJECT_INSTALL)/lib ;
path-constant PROJECT_LIB_INSTALL_DEBUG : $(PROJECT_INSTALL)/libdebug ;

BOOST_LIB_INSTALL = [ modules.peek : BOOST_LIB_INSTALL ] ;
if ! $(BOOST_LIB_INSTALL) {
   path-constant BOOST_LIB_INSTALL : /apps/boost/boost-install/lib ;
} else {
   path-constant BOOST_LIB_INSTALL : $(BOOST_LIB_INSTALL) ;
}
 
BOOST_INCLUDE_BASE = [ modules.peek : BOOST_INCLUDE_DIR ] ;
if ! $(BOOST_INCLUDE_BASE) {
   path-constant BOOST_INCLUDE_BASE : /apps/boost/boost-install/include ;
} else {
   path-constant BOOST_INCLUDE_BASE : $(BOOST_INCLUDE_BASE) ;
}

path-constant xerces_root_ : /apps/xerces ;
path-constant XERCES_INCLUDE_BASE : $(xerces_root_)/include/ ;
path-constant XERCES_LIB_BASE : $(xerces_root_)/lib/ ;

path-constant bzip2_root_ : /apps/bzip2 ;
path-constant BZIP2_INCLUDE_BASE : $(bzip2_root_)/include ;
path-constant BZIP2_LIB_BASE : $(bzip2_root_)/lib ;

path-constant MYSQLCPP_BASE : /apps/mysqlcpp/mysql-connector-c++-1.1.5_install ;
path-constant MYSQLCPP_INCLUDE_PATH : $(MYSQLCPP_BASE)/include ;
path-constant MYSQLCPP_LIB_PATH : $(MYSQLCPP_BASE)/lib ;

local headers = [ path.glob-tree $(MIDTERM_PROJECT_ROOT) : *.hpp ] ;

install headers
    : $(headers)
    : <location>$(MIDTERM_INSTALL) <install-source-root>$(MIDTERM_PROJECT_ROOT)
    ;

project basetrade-midterm
	: requirements 
	  <include>$(CVQUANT_INSTALL) # removed the individual includes since we will be including all files like "basetrade/InitLogic/blah.hpp"
	  <include>$(BOOST_INCLUDE_BASE)
	  <include>$(XERCES_INCLUDE_BASE)
          <include>$(MYSQLCPP_INCLUDE_PATH)
	  <architecture>x86
	  <address-model>64
	  <variant>debug:<inlining>off
	  <variant>debug:<debug-symbols>on
	  <variant>debug:<optimization>off
	  <variant>debug:<warnings>on
	  <variant>debug:<warnings-as-errors>off
	  <variant>release:<warnings>on
	  <variant>release:<warnings-as-errors>off
	  <library-path>$(BZIP2_LIB_BASE)
	  <library-path>$(BOOST_LIB_INSTALL)
          <library-path>/apps/nsmsg/
	  #	  <library-path>$(PROJECT_INSTALL)/lib # commented this since I think we don't need this any more
          <linkflags>-lcurl
          <linkflags>-lcrypto
          <linkflags>-lz
          <toolset>gcc:<cxxflags>-std=gnu++14 # changed to this from -std=gnu++0x to work with C++14
          <toolset>gcc:<cxxflags>-fdiagnostics-color=always
          #<toolset>gcc:<cxxflags>-fprofile-generate
          #<toolset>gcc:<cxxflags>-fprofile-generate=/spare/local/ProfileInfo/basetrade
          #<toolset>gcc:<cxxflags>-fprofile-use
          #<toolset>gcc:<cxxflags>-fprofile-use=/spare/local/ProfileInfo/basetrade
          #<toolset>gcc:<linkflags>-lgcov # This was uncommented by Diwakar in the branch 'pgo' when trying to do profile guided optimization. @diwakarchauhan, @psarthy I suggest adding a profile-guided-optimization.md file in docs directory showing how a person can do pgo in future.
          #<toolset>gcc:<cxxflags>-Wcoverage-mismatch
          <toolset>clang:<cxxflags>-std=c++11
          <toolset>clang:<linkflags>-lpthread
          <toolset>clang:<cflags>-fcolor-diagnostics # clang colors
          <toolset>clang:<cxxflags>-fcolor-diagnostics # clang colors
	  <cflags>-isystem$(BOOST_INCLUDE_BASE)
	  <cflags>-Wunused-local-typedefs
	  <variant>release:<cflags>-flto # Link time optimization has been enabled I think
          <link>static
	: default-build release
	;

# Executibles 
build-project GeneralizedLogicCode ;
build-project MidTermCode ;
build-project Execs ;
