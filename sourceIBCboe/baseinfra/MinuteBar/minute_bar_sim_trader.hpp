/**
    \file MinuteBar/minute_bar_sim_trader.hpp

    \author: (c) Copyright Two Roads Technological Solutions Pvt Ltd 2011
     Address:
         Suite No 353, Evoma, #14, Bhattarhalli,
         Old Madras Road, Near Garden City College,
         KR Puram, Bangalore 560049, India
         +91 80 4190 3551
 */
#pragma once

#include <string>

#include "baseinfra/OrderRouting/base_order.hpp"
#include "baseinfra/OrderRouting/base_trader.hpp"
#include "dvccode/ORSMessages/ors_message_listener.hpp"
#include "dvccode/CommonDataStructures/vector_utils.hpp"

namespace HFSAT {
/** class extending interface BaseTrader that is associated to
 * sending sim orders security
 */
class MinuteBarSimTrader : public BaseTrader {
 protected:
  int client_id_;
  int dep_security_id_;
  int client_position_;
  ///< vector of listeners to ORS messages generated by SMM of type kORRType_None
  std::vector<OrderNotFoundListener*> order_not_found_listener_vec_;
  ///< vector of listeners to ORS messages generated by SMM of type kORRType_Seqd
  std::vector<OrderSequencedListener*> order_sequenced_listener_vec_;
  ///< vector of listeners to ORS messages generated by SMM of type kORRType_Conf
  std::vector<OrderConfirmedListener*> order_confirmed_listener_vec_;
  ///< vector of listener to ORS messages generated by SMM of type kORRType_CxRe
  std::vector<OrderConfCxlReplaceRejectListener*> order_conf_cxlreplace_rejected_listener_vec_;
  ///< vector of listeners to ORS messages generated by SMM of type kORRType_CxRe
  std::vector<OrderConfCxlReplacedListener*> order_conf_cxlreplaced_listener_vec_;
  ///< vector of listeners to ORS messages generated by SMM of type kORRType_Cxld
  std::vector<OrderCanceledListener*> order_canceled_listener_vec_;
  ///< vector of listeners to ORS messages generated by SMM of type kORRType_Exec
  std::vector<OrderExecutedListener*> order_executed_listener_vec_;
  ///< vector of listeners to ORS messages generated by SMM of type kORRType_Rejc
  std::vector<OrderRejectedListener*> order_rejected_listener_vec_;
  ///< vector of listeners to ORS messages generated by SMM of type kORRType_IntExec
  // std::vector < OrderInternallyMatchedListener * > order_internally_matched_listener_vec_ ;
 public:
  MinuteBarSimTrader(int client_id, int dep_security_id)
      : client_id_(client_id),
        dep_security_id_(dep_security_id),
        client_position_(),
        order_not_found_listener_vec_(),
        order_sequenced_listener_vec_(),
        order_confirmed_listener_vec_(),
        order_conf_cxlreplace_rejected_listener_vec_(),
        order_conf_cxlreplaced_listener_vec_(),
        order_canceled_listener_vec_(),
        order_executed_listener_vec_(),
        order_rejected_listener_vec_() {}

  virtual ~MinuteBarSimTrader() {}

  void SendTrade(const BaseOrder& order) {
    BroadcastSequenced(client_id_, &order);
    BroadcastConfirm(client_id_, &order);

    if (order.buysell_ == kTradeTypeBuy) {
      client_position_ += order.size_remaining_;
    } else {
      client_position_ -= order.size_remaining_;
    }
    BroadcastExecNotification(client_id_, &order);
  }

  void Cancel(const BaseOrder& order) {}

  void Modify(const BaseOrder& order, double _new_price_, int _new_int_price_, int _new_size_requested_) {}

  void Replay(const BaseOrder& order) const {}

  int GetClientId() const { return client_id_; }

  void BroadcastRejection(const int saci, const BaseOrder* sim_order, ORSRejectionReason_t reject_reason);

  void BroadcastSequenced(const int saci, const BaseOrder* sim_order);

  void BroadcastConfirm(const int t_server_assigned_client_id_, const BaseOrder* p_sim_order_);

  void BroadcastCancelNotification(const int t_server_assigned_client_id_, const BaseOrder* p_sim_order_);

  void BroadcastExecNotification(const int t_server_assigned_client_id_, const BaseOrder* p_sim_order_);

  void BroadcastOrderNone(const int server_assigned_client_id_, const int client_assigned_order_sequence_,
                          const int server_assigned_order_sequence_, const char* exchange_symbol_, const double price_,
                          const int int_price_, const TradeType_t buysell_, const int size_remaining_,
                          const int size_executed_);

  void BroadcastOrderModifyRejectNotification(const int server_assigned_client_id,
                                              const int client_assigned_order_sequence,
                                              const int server_assigned_order_sequence, const unsigned int security_id,
                                              const double price, const TradeType_t buysell, const int size_remaining,
                                              const int client_position, const int global_position, const int intprice,
                                              const int32_t server_assigned_message_sequence);
  void BroadcastOrderModifyNotification(const int _server_assigned_client_id_, const BaseOrder* p_sim_order_,
                                        const double _new_price_, const int _new_int_prie_, const int _new_size_);

  inline void AddOrderSequencedListener(OrderSequencedListener* new_listener) {
    VectorUtils::UniqueVectorAdd(order_sequenced_listener_vec_, new_listener);
  }
  inline void RemOrderSequencedListener(OrderSequencedListener* new_listener) {
    VectorUtils::UniqueVectorRemove(order_sequenced_listener_vec_, new_listener);
  }

  inline void AddOrderConfirmedListener(OrderConfirmedListener* new_listener) {
    VectorUtils::UniqueVectorAdd(order_confirmed_listener_vec_, new_listener);
  }
  inline void RemoveOrderConfirmedListener(OrderConfirmedListener* new_listener) {
    VectorUtils::UniqueVectorRemove(order_confirmed_listener_vec_, new_listener);
  }

  inline void AddOrderConfCxlReplaceRejectedListener(OrderConfCxlReplaceRejectListener* new_listener) {
    VectorUtils::UniqueVectorAdd(order_conf_cxlreplace_rejected_listener_vec_, new_listener);
  }

  inline void RemoveOrderConfCxlReplaceRejectedListener(OrderConfCxlReplaceRejectListener* new_listener) {
    VectorUtils::UniqueVectorAdd(order_conf_cxlreplace_rejected_listener_vec_, new_listener);
  }

  inline void AddOrderConfCxlReplacedListener(OrderConfCxlReplacedListener* new_listener) {
    VectorUtils::UniqueVectorAdd(order_conf_cxlreplaced_listener_vec_, new_listener);
  }
  inline void RemoveOrderConfCxlReplacedListener(OrderConfCxlReplacedListener* new_listener) {
    VectorUtils::UniqueVectorRemove(order_conf_cxlreplaced_listener_vec_, new_listener);
  }

  inline void AddOrderCanceledListener(OrderCanceledListener* new_listener) {
    VectorUtils::UniqueVectorAdd(order_canceled_listener_vec_, new_listener);
  }
  inline void RemoveOrderCanceledListener(OrderCanceledListener* new_listener) {
    VectorUtils::UniqueVectorRemove(order_canceled_listener_vec_, new_listener);
  }

  inline void AddOrderExecutedListener(OrderExecutedListener* new_listener) {
    VectorUtils::UniqueVectorAdd(order_executed_listener_vec_, new_listener);
  }
  inline void RemoveOrderExecutedListener(OrderExecutedListener* new_listener) {
    VectorUtils::UniqueVectorRemove(order_executed_listener_vec_, new_listener);
  }

  inline void AddOrderRejectedListener(OrderRejectedListener* new_listener) {
    VectorUtils::UniqueVectorAdd(order_rejected_listener_vec_, new_listener);
  }
  inline void RemoveOrderRejectedListener(OrderRejectedListener* new_listener) {
    VectorUtils::UniqueVectorRemove(order_rejected_listener_vec_, new_listener);
  }

  void IgnoreFromGlobalPos() {}
};
}
