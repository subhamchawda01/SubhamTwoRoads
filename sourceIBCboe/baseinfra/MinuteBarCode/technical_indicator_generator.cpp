#include "baseinfra/MinuteBar/technical_indicator_generator.hpp"

namespace HFSAT {

TechnicalsIndicators *TechnicalsIndicators::unique_instance_ = nullptr;

TechnicalsIndicators &TechnicalsIndicators::GetUniqueInstance(std::string input_date) {
  if (unique_instance_ == nullptr) {
    unique_instance_ = new TechnicalsIndicators(input_date);
  }
  return *(unique_instance_);
}

TechnicalsIndicators::TechnicalsIndicators(std::string input_date_)
    : db_update_nse(HFSAT::DbUpdateNse::GetUniqueInstance(input_date_, false, false, false)),
      cashCorporateAction(HFSAT::CashCorporateAction::GetUniqueInstance()) {
  // working in here CLEARING IS DONE BY BHAV COPY else make flag +ve
  int this_date = stoi(input_date_);
  bool current_day = true;
  for (int index = 0; index < 250; index++) {
    LoadBhavCopyParams(this_date, current_day);
    current_day = false;
    this_date = HFSAT::HolidayManagerUtils::GetPrevBusinessDayForExchange("NSE", this_date);
  }
  std::cout << "CalculateSMA " << std::endl;
  CalculateSMA();
  std::cout << "CalculateMACD " << std::endl;
  CalculateMACD();
  std::cout << "CalculateRSI " << std::endl;
  CalculateRSI();
  std::cout << "CalculateMFI " << std::endl;
  CalculateMFI();
  std::cout << "CalculateCCI " << std::endl;
  CalculateCCI();
  std::cout << "CalculateWILLIAM " << std::endl;
  CalculateWILLIAM();
  std::cout << "CalculateADX " << std::endl;
  CalculateADX();
  std::cout << "CalculatePSAR " << std::endl;
  CalculatePSAR();
  std::cout << "CalculateAvgVolume " << std::endl;
  CalculateAvgVolume();
}

void TechnicalsIndicators::LoadBhavCopyParams(const int t_date_, bool current_day) {
  std::ostringstream nse_bhav_copy_file_name_oss_;
  std::string nse_bhav_copy_file_name_ = "";
  std::vector<std::string> month_vec_ = {"JAN", "FEB", "MAR", "APR", "MAY", "JUN",
                                         "JUL", "AUG", "SEP", "OCT", "NOV", "DEC"};

  int this_date = t_date_;

  // bhavcopy files for the date D are generated by the same date_stamp unlike nse_contract files
  // get the previous business day and load the data
  // split into dd mm yy
  std::ostringstream date_string_oss_;
  date_string_oss_ << this_date;
  std::string prev_date_ = date_string_oss_.str();
  nse_bhav_copy_file_name_oss_ << "NSE_Files/Margin_Files/Exposure_Files/cm" << prev_date_.substr(6, 2)
                               << month_vec_[std::stoi(prev_date_.substr(4, 2)) - 1] << prev_date_.substr(0, 4)
                               << "bhav.csv";
  nse_bhav_copy_file_name_ = std::string("/spare/local/tradeinfo/") + nse_bhav_copy_file_name_oss_.str();
  // std::cout << "TECHNICAL CM BHAVCOPY: " << nse_bhav_copy_file_name_ << std::endl;
  if (HFSAT::FileUtils::ExistsAndReadable(nse_bhav_copy_file_name_)) {
    std::ifstream nse_bhavcopy_file_;
    nse_bhavcopy_file_.open(nse_bhav_copy_file_name_.c_str(), std::ifstream::in);
    char readline_buffer_[1024];
    if (nse_bhavcopy_file_.is_open()) {
      while (nse_bhavcopy_file_.good()) {
        memset(readline_buffer_, 0, sizeof(readline_buffer_));
        nse_bhavcopy_file_.getline(readline_buffer_, sizeof(readline_buffer_));

        std::vector<char *> tokens_;
        // create a copy of line read before using non-const tokenizer
        char readline_buffer_copy_[1024];
        memset(readline_buffer_copy_, 0, sizeof(readline_buffer_copy_));
        strcpy(readline_buffer_copy_, readline_buffer_);

        HFSAT::PerishableStringTokenizer::NonConstStringTokenizer(readline_buffer_copy_, ",", tokens_);
        std::string expr_date_;
        std::string trimmed_str_;
        // trim the inst_type field: contains spaces
        if (tokens_.size() >= 9) HFSAT::PerishableStringTokenizer::TrimString(tokens_[1], trimmed_str_, ' ');
        if (tokens_.size() >= 9 && tokens_[0][0] != '#' && (trimmed_str_ == "EQ")) {
          HFSAT::PerishableStringTokenizer::TrimString(tokens_[0], trimmed_str_, ' ');
          std::string _this_shortcode_ = "NSE_" + trimmed_str_;
          // DB CALL
          double adjust_val = cashCorporateAction.CheckCorporateAction(prev_date_, trimmed_str_);
          adjust_val = adjust_val * getPreviousAdjust(trimmed_str_);
	  updatePreviousAdjust(trimmed_str_, adjust_val);
          PopulateValues(_this_shortcode_, adjust_val * atof(tokens_[4]), adjust_val * atof(tokens_[3]),
                         adjust_val * atof(tokens_[5]), adjust_val * atoi(tokens_[8]), current_day);
          // std::cout << "sc, close:: " << shortcode_ << ", " <<  shortcode_2_last_close_[trimmed_str_] << "\n";
        }
      }  // end while
    }
    nse_bhavcopy_file_.close();
  } else {
    std::cerr << "Fatal error - could not read NSE Bhavcopy file " << nse_bhav_copy_file_name_ << ".Exiting.\n";
    exit(0);
  }
}
}  // namespace HFSAT
